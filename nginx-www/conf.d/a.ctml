{{range services}}{{ if .Tags.Contains "web" }}upstream {{.Name}} {
	least_conn;
	{{range service .Name}}server  {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;{{else}}server 127.0.0.1:65535;{{end}}
}
{{end}}{{end}}

server {
	listen 80; 


	location =/ {
		rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';

		 rewrite ^(.*)$ /admin/login.html last;
}

	{{range services}}{{ if .Tags.Contains "web" }}location /{{.Name}}/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://{{.Name}};
		client_max_body_size    1000m;
  	}
	{{end}}{{end}}

	location /auth_token {
     if ($arg_url = "") {
         return 403;
     }
     access_by_lua '
         local random = math.random(9999)
         local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
         if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
             ngx.header["Set-Cookie"] = {"NOONLY_ACCESS=" .. token, "NOONLY_KEY=" .. random}
             return ngx.redirect(ngx.var.arg_url)
         end
     ';
}
}
