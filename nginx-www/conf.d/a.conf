upstream AccessInterface {
	least_conn;
	server  192.168.4.203:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream Authority {
	least_conn;
	server  192.168.4.203:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream Info {
	least_conn;
	server  192.168.4.215:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream Login {
	least_conn;
	server  192.168.4.217:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream Question {
	least_conn;
	server  192.168.4.210:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream QuestionPrivilege {
	least_conn;
	server  192.168.4.70:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream RecordController {
	least_conn;
	server  192.168.4.211:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream SupperManage {
	least_conn;
	server  192.168.4.69:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream TestController {
	least_conn;
	server  192.168.4.209:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream TestPlan {
	least_conn;
	server  192.168.4.216:8080 max_fails=3 fail_timeout=60 weight=1;
}
upstream admin {
	least_conn;
	server  192.168.131.193:80 max_fails=3 fail_timeout=60 weight=1;
}
upstream appInfo {
	least_conn;
	server 127.0.0.1:65535;
}
upstream appMessage {
	least_conn;
	server 127.0.0.1:65535;
}
upstream public {
	least_conn;
	server  192.168.131.193:80 max_fails=3 fail_timeout=60 weight=1;
}
upstream webroot {
	least_conn;
	server  192.168.4.208:6379 max_fails=3 fail_timeout=60 weight=1;
}
upstream www {
	least_conn;
	server  192.168.4.196:6379 max_fails=3 fail_timeout=60 weight=1;
}


server {
	listen 80; 


	location =/ {
		rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';

		 rewrite ^(.*)$ /admin/login.html last;
}

	location /AccessInterface/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://AccessInterface;
		client_max_body_size    1000m;
  	}
	location /Authority/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://Authority;
		client_max_body_size    1000m;
  	}
	location /Info/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://Info;
		client_max_body_size    1000m;
  	}
	location /Login/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://Login;
		client_max_body_size    1000m;
  	}
	location /Question/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://Question;
		client_max_body_size    1000m;
  	}
	location /QuestionPrivilege/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://QuestionPrivilege;
		client_max_body_size    1000m;
  	}
	location /RecordController/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://RecordController;
		client_max_body_size    1000m;
  	}
	location /SupperManage/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://SupperManage;
		client_max_body_size    1000m;
  	}
	location /TestController/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://TestController;
		client_max_body_size    1000m;
  	}
	location /TestPlan/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://TestPlan;
		client_max_body_size    1000m;
  	}
	location /admin/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://admin;
		client_max_body_size    1000m;
  	}
	location /appInfo/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://appInfo;
		client_max_body_size    1000m;
  	}
	location /appMessage/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://appMessage;
		client_max_body_size    1000m;
  	}
	location /public/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://public;
		client_max_body_size    1000m;
  	}
	location /webroot/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://webroot;
		client_max_body_size    1000m;
  	}
	location /www/ {
     rewrite_by_lua '
     local random = ngx.var.cookie_NOONLY_KEY
     if (random == nil) then
         return ngx.redirect("/auth_token?url=" .. ngx.var.request_uri)
     end
     local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
     if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
         return ngx.redirect("/auth_token?url=".. ngx.var.request_uri)
     end
';
		proxy_pass http://www;
		client_max_body_size    1000m;
  	}
	

	location /auth_token {
     if ($arg_url = "") {
         return 403;
     }
     access_by_lua '
         local random = math.random(9999)
         local token = ngx.md5("Ntoken" .. random .. ngx.var.remote_addr .. random)
         if (ngx.var.cookie_NOONLY_ACCESS ~= token) then
             ngx.header["Set-Cookie"] = {"NOONLY_ACCESS=" .. token, "NOONLY_KEY=" .. random}
             return ngx.redirect(ngx.var.arg_url)
         end
     ';
}
}
